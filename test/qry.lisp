(in-package #:grph-tests)

(plan 1)


(defun make-edge-set (
  &aux (g (grph:grph))
  (f `((0 :A 1) (0 :C 1) (1 :A 3) (1 :A 2) (1 :A 0) (1 :C 0)
       (2 :A 1) (3 :C 7) (3 :B 5) (3 :C 5) (3 :B 4) (3 :A 1)
       (4 :B 3) (4 :B 5) (4 :E 5) (5 :B 3) (5 :C 3) (5 :B 4)
       (5 :E 4) (7 :C 3) (99 :X 77))))
  ; (mapcar #'print (sort (copy-tree f) #'< :key #'car))
  (grph::ingest-facts g f))

(subtest "qry"
  (let ((g (make-edge-set)))

    (is (grph:qry g :select (?x ?y)
                    :where (and (?x :c ?y)
                                (?x :a ?y)
                                (not (?x :b ?h))))
        '((1 0) (0 1)))
    (is (grph:qry g :select (?x ?y)
                    :where (and (?x :a ?y)
                                (?x :c ?y)))
        '((0 1) (1 0)))
    (is (grph:qry g :select (?z ?x ?y)
                    :where (and (?x :a ?y)
                                (?y :b ?z)))
        '((4 1 3) (5 1 3)))
    (is (grph:qry g :select (?x ?y)
                    :where (and (?x :c ?y)
                                (not (7 :c ?y))))
        '((0 1) (1 0) (3 5) (3 7)))
    (is (grph:qry g :select (?x ?y)
                    :where (and (?x :c ?y)
                                (not (or (?x :a 1)
                                         (?x :a 3)))))
          '((5 3) (7 3)))
    ; (is (grph:qry g :select (?a)
    ;                           :where (or (?x :c ?y)
    ;                                      (not (?x :a 1)
    ;                                           (?x :a 3))))
    ;     '(((?X . 7) (?Y . 3)) ((?X . 5) (?Y . 3))))
    (is (grph:qry g :select (?x ?y)
                    :where (and (?x :a ?y)
                                (?x :c ?y)
                                (not (?x :c ?y))))
          nil)
    (is (grph:qry g :select (?y)
                    :where (and (_ :a ?y)
                                (not (_ :b ?y))))
        '((1) (0) (2)))
    ; (is (grph:qry g :select (?a)
    ;               :where (and (not (_ :b ?y))
    ;                           (_ :a ?y)))
    ;     '(((?Y . 1)) ((?Y . 2)) ((?Y . 0))))
    (is (grph:qry g :select (?x ?y)
                    :where (or (?x :a ?y)
                               (?x :b ?y)))
        '((3 4) (3 5) (4 3) (4 5) (5 3) (5 4)
          (3 1) (2 1) (1 3) (1 2) (1 0) (0 1)))
    (is (grph:qry g :select (?x ?y)
                    :where (and (or (?x :a ?y)
                                    (?x :b ?y))
                                (not (?x :a ?y))))
        '((5 4) (4 5)))
    (is (grph:qry g :select (?x ?y)
                    :where (or (?x :e ?y)
                               (?x :a ?y)))
        '((0 1) (1 0) (1 2) (1 3)
          (2 1) (3 1) (5 4) (4 5)))

    (is (let ((?x 5))
          (grph:qry g :select (?y)
                      :in (?x)
                      :where (or (?x :e ?y)
                                 (?x :a ?y))))
        `((4)))))

(unless (finalize) (error "error in qry."))

