(in-package #:grph-tests)

(plan 1)


(defun make-edge-set ()
  `((0 :A 1) (0 :C 1) (1 :A 3) (1 :A 2) (1 :A 0) (1 :C 0)
    (2 :A 1) (3 :C 7) (3 :B 5) (3 :C 5) (3 :B 4) (3 :A 1)
    (4 :B 3) (4 :B 5) (4 :E 5) (5 :B 3) (5 :C 3) (5 :B 4)
    (5 :E 4) (7 :C 3)))

(subtest "qry"
  (let ((facts (make-edge-set)))

    (is (grph:facts-qry facts :select (?a)
                              :where (and (?x :c ?y)
                                          (?x :a ?y)
                                          (not (?x :b ?h))))
        '(((?X . 1) (?Y . 0)) ((?X . 0) (?Y . 1))))
    (is (grph:facts-qry facts :select (?a)
                              :where (and (?x :a ?y)
                                          (?x :c ?y)))
        '(((?X . 1) (?Y . 0)) ((?X . 0) (?Y . 1))))
    (is (grph:facts-qry facts :select (?a)
                              :where (and (?x :a ?y)
                                          (?y :b ?z)))
        '(((?X . 1) (?Y . 3) (?Z . 5))
          ((?X . 1) (?Y . 3) (?Z . 4))))
    (is (grph:facts-qry facts :select (?a)
                              :where (and (?x :c ?y)
                                          (not (?x :a 1))
                                          (not (?x :a 3))))
        '(((?X . 7) (?Y . 3)) ((?X . 5) (?Y . 3))))
    ; make this identical query to above, but with or
    ; (is (grph:facts-qry facts :select (?a)
    ;                            :where (and (?x :c ?y)
    ;                                        (not (or (?x :a 1)
    ;                                                 (?x :a 3)))))
    ;       '(((?X . 7) (?Y . 3)) ((?X . 5) (?Y . 3))))
    (is (grph:facts-qry facts :select (?a)
                              :where (or (?x :c ?y)
                                         (not (?x :a 1)
                                              (?x :a 3))))
        '(((?X . 0) (?Y . 1)) ((?X . 1) (?Y . 0)) ((?X . 3) (?Y . 7))
          ((?X . 3) (?Y . 5)) ((?X . 5) (?Y . 3)) ((?X . 7) (?Y . 3))))
    (is (grph:facts-qry facts :select (?a)
                              :where (and (?x :a ?y)
                                          (?x :c ?y)
                                          (not (?x :c ?y))))
          nil)
    (is (grph:facts-qry facts :select (?a)
                              :where (and (_ :a ?y)
                                          (not (_ :b ?y))))
        '(((?Y . 1)) ((?Y . 2)) ((?Y . 0))))
    (is (grph:facts-qry facts :select (?a)
                              :where (and (not (_ :b ?y))
                                          (_ :a ?y)))
        '(((?Y . 1)) ((?Y . 2)) ((?Y . 0))))
    (is (grph:facts-qry facts :select (?a)
                              :where (or (?x :a ?y)
                                         (?x :b ?y)))
        '(((?X . 0) (?Y . 1)) ((?X . 1) (?Y . 0)) ((?X . 1) (?Y . 2))
          ((?X . 1) (?Y . 3)) ((?X . 2) (?Y . 1)) ((?X . 3) (?Y . 1))
          ((?X . 3) (?Y . 4)) ((?X . 3) (?Y . 5)) ((?X . 4) (?Y . 3))
          ((?X . 4) (?Y . 5)) ((?X . 5) (?Y . 3)) ((?X . 5) (?Y . 4))))
    (is (grph:facts-qry facts :select (?a)
                              :where (and (or (?x :a ?y)
                                              (?x :b ?y))
                                          (not (?x :a ?y))))
        '(((?X . 5) (?Y . 4)) ((?X . 4) (?Y . 5))))
    (is (grph:facts-qry facts :select (?a)
                              :where (or (?x :e ?y)
                                         (?x :a ?y)))
        '(((?X . 0) (?Y . 1)) ((?X . 1) (?Y . 3)) ((?X . 1) (?Y . 2))
          ((?X . 1) (?Y . 0)) ((?X . 2) (?Y . 1)) ((?X . 3) (?Y . 1))
          ((?X . 5) (?Y . 4)) ((?X . 4) (?Y . 5))))
    ))

(unless (finalize) (error "error in qry."))

