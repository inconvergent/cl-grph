(in-package #:grph-tests)

(plan 2)


(defun mk-grph-main ()
  (let ((g (grph:grph))
        (bprop  '((:b "90"))))
    (grph:add! g 0 1)
    (grph:add! g 2 3)
    (grph:add! g 3 4 '(:a))
    (grph:add! g 4 3 '((:a "43")))
    (grph:add! g 5 6)
    (grph:add! g 6 0 '((:a "60")))
    (grph:add! g 7 8 '(:c))
    (grph:add! g 8 9 '(:b))
    (grph:add! g 9 0 bprop)
    (grph:add! g 7 8 '(:b))
    (grph:add! g 0 3)
    g))

(subtest "grph-main"
  (let ((g (mk-grph-main)))
    (is (grph:@edges g)
        '((9 0) (8 9) (7 8) (6 0) (5 6) (4 3) (3 4) (2 3) (0 3) (0 1)))
    (is (grph:@verts g) '(9 8 7 6 5 4 2 3 1 0))
    (is (grph:@out g 3) '(4))
    (is (grph:@in g 3) '(2 0))

    (is (grph:@mem g 7 8) t)
    (is (grph:@prop g (list 7 8)) (fset:map (:c t)) :test #'equalp)
    (grph:del! g 7 8)
    (is (grph:@mem g 7 8) nil)
    (grph:del! g 2 3)
    (is (grph:@in g 3) '(0))

    (is (grph:@prop g (list 4 3)) (fset:map (:a "43")) :test #'equalp)
    (is (grph:@prop g (list 4 3) :a) "43")
    (is (grph:@prop g (list 7 8)) nil)
    (is (grph:@verts g) '(9 8 6 5 4 3 1 0))
    ))

(grph::awg (res f)
  (defmacro gather-short-match (g l p r)
    `(let ((,res (list))) (grph::%match (,g ,f ,l ,p ,r) (push ,f ,res)) ,res))
  (defmacro gather-match (g l p r)
    `(let ((,res (list))) (grph:match (,g ,f ,l ,p ,r) (push ,f ,res)) ,res)))

(defun mk-grph-match ()
  (let ((g (grph:grph)))
    (grph:add! g 0 1 '(:a))
    (grph:add! g 0 3 '(:a))
    (grph:add! g 2 3 '((:a "bbbbb")))
    (grph:prop! g '(2 3) '((:b "ccccc")))
    (grph:add! g 3 4 '(:a))
    (grph:add! g 4 3 '(:a))
    (grph:add! g 7 8 '((:a "7778888")))
    (grph:add! g 5 6)
    (grph:add! g 6 0 '(:b))
    (grph:add! g 33 0 '(:b))
    (grph:add! g 8 9 '(:b))
    (grph:add! g 9 0 '(:a))
    (grph:prop! g '(0 1) '((:a "aaa")))
    g))

(subtest "grph-match"
  (let ((g (mk-grph-match)))

    (is (gather-short-match g 0 ?a ?b) '((0 :A 3) (0 :A 1)))
    (is (gather-short-match g 0 :a ?b)'((0 :A 3) (0 :A 1)))
    (is (gather-short-match g 2 ?b 3) '((2 :B 3) (2 :A 3)))
    (is (gather-short-match g ?b :b 0) '((33 :B 0) (6 :B 0)))
    (is (gather-short-match g ?b :b ?a) '((33 :B 0) (8 :B 9) (6 :B 0) (2 :B 3)))
    (is (gather-short-match g ?b ?a 3) '((4 :A 3) (2 :B 3) (2 :A 3) (0 :A 3)))
    (is (gather-short-match g 4 :a 3) '((4 :A 3)))
    (is (gather-short-match g ?a ?b ?c) '((33 :B 0) (9 :A 0) (8 :B 9) (7 :A 8)
                                          (6 :B 0) (5 :_ 6) (4 :A 3) (3 :A 4)
                                          (2 :B 3) (2 :A 3) (0 :A 3) (0 :A 1)))
    (is (gather-match g ?a ?b ?c) '(((?A . 33) (?B . :B) (?C . 0))
                                    ((?A . 9) (?B . :A) (?C . 0))
                                    ((?A . 8) (?B . :B) (?C . 9))
                                    ((?A . 7) (?B . :A) (?C . 8))
                                    ((?A . 6) (?B . :B) (?C . 0))
                                    ((?A . 5) (?B . :_) (?C . 6))
                                    ((?A . 4) (?B . :A) (?C . 3))
                                    ((?A . 3) (?B . :A) (?C . 4))
                                    ((?A . 2) (?B . :B) (?C . 3))
                                    ((?A . 2) (?B . :A) (?C . 3))
                                    ((?A . 0) (?B . :A) (?C . 3))
                                    ((?A . 0) (?B . :A) (?C . 1))))))

(unless (finalize) (error "error in grph"))

